<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nmta blog</title>
    <link>https://neutrinoboy.jp/</link>
    <description>Recent content on nmta blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 13 Dec 2019 04:27:35 +0000</lastBuildDate>
    
	<atom:link href="https://neutrinoboy.jp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>アジャイルの問題点</title>
      <link>https://neutrinoboy.jp/2019/12/13/4220131612/</link>
      <pubDate>Fri, 13 Dec 2019 04:27:35 +0000</pubDate>
      
      <guid>https://neutrinoboy.jp/2019/12/13/4220131612/</guid>
      <description>東京で開催されたマネージャーのための研修（3日間）に参加した際のこと。1日目の研修を終えた後、友人のT氏と会う機会があり、アジャイルプロジェクトについて話をした。
T氏はアジャイルプロジェクトを担当した経験も多く、アジャイルには広く精通している。そんなT氏がこんな話をしていた。昔担当したプロジェクトで、顧客がアジャイルについて勘違いをしていたため、酷い目にあったと。
「アジャイルは無限に仕様変更できるんでしょ？」そう顧客が理解をしていたため、無限に仕様変更の対応を行う羽目になったそうだ。
完全に間違っているとは言えない。アジャイルはたとえ開発の後期であっても仕様変更を受け入れる。しかし、問題は受け入れる方法にある。ただ受け入れるわけではない。スコープもしくは納期の調整が必要だ。
スコープも納期も調整できていないとすれば、要員の追加や残業での対応が必要となるだろう。そうなると今度は予算の調整が必要だが、おそらく予算の調整もできず、すぐに予算が底をつくことになったに違いない。
そもそもこんな話はアジャイルに限った話ではない。今回の話でアジャイルに問題がなかったことはいうまでもないだろう。そうではないとすると、アジャイルはこういうものだと説明できなかった開発に問題があるのだろうか。私はそれに関しても否定的だ。なんせアジャイルに精通しているT氏が担当しているのだから。
それではどこに問題があったのだろうか。それは顧客、さらには顧客と開発の関係性に問題があったと考えている。実はこの話SIの世界ではさほど珍しい話でもない。笑い話のようでSIerにとって笑えない話でもある。
顧客はそんなに簡単に言うことを聞かないし、いつでも仕様変更をしたがる。そこへ持ってきてアジャイルは無限に仕様変更ができると発注側にとって都合のいい箇所だけを抜き出して、アジャイル手法を導入したのだ。
発注側はスコープ、納期（もちろん品質、予算についても）の調整に関して聞く耳を持たないケースも考えられるし、間に何社か入っている場合、そもそも調整自体行わないことも考えられる。
その場合でも、納期に間に合わせる必要があるとプレッシャーをかけられる。しかし、何を言われようが間に合わないものは間に合わない。そうして納期が遅れると、あたかも開発に全責任があるかのような罵声を浴びせられ、そうなって初めて納期が延期される。
ただ延期されるわけではない、顧客は「特別に納期を1週間伸ばしてあげましょう。その代わりしっかりと対応するように」と迫ってくる。
たとえウォーターフォールであっても同じ問題が起きたに違いない。ウォーターフォールでもまだ仕様が決まったわけではないと難癖をつけられ仕様は変更される。さらにアジャイルとなると、公然と仕様変更をつきつけられる。「それがアジャイルだ」と。
開発手法は、開発と名前はついているものの、開発メンバーだけのための手法ではない。アジャイルでは顧客も含めて一つのチームと定義されている。顧客が積極的に関与しないプロジェクトでは、開始時点からプロジェクトは失敗していると言っていい。丸投げは許されない。
しかし、どのような状況であってもアジャイルを止めてはいけない。生産性からベロシティ（開発速度）を計測し、常に顧客に真実を伝え続ける。たとえ顧客が聞く耳を持たなくても伝え続けなければいけない。結果は同じかもしれない。しかしメンバー（顧客は含まない！）は納期が遅れることをあらかじめ知っているのと知らないのでは大きく違う。遅れるのもすべて予定通り。予定通りで遅れる理由も明確になっていれば罵声を浴びせられたところで悲観的になることもないだろう。
アジャイルに問題点があるとしたら、仕様を受け入れるたびに顧客と調整し続けなければいけない点だろう。顧客の対応次第では、顧客と常に戦い続けることを求められているといっても過言ではない。決して平坦な道ではない。それがアジャイルだ。</description>
    </item>
    
    <item>
      <title>プロジェクトはなぜ失敗するのか</title>
      <link>https://neutrinoboy.jp/2019/12/04/4157041112/</link>
      <pubDate>Wed, 04 Dec 2019 02:48:42 +0000</pubDate>
      
      <guid>https://neutrinoboy.jp/2019/12/04/4157041112/</guid>
      <description>「プロジェクトはなぜ失敗するのか」という資料を書いた。
https://speakerdeck.com/nmta/hurosiekutohanaseshi-bai-surufalseka
プロジェクトを成功させることはSIerにとって永遠のテーマである。開発者、プロジェクトマネージャー、顧客、その他多くの関係者がうまく機能してはじめてプロジェクトは成功する。いずれもかけてはいけない。
大きな案件を受注したものの「うまくやれるだろうか」と不安に思うこともあるかもしれない。はじめて経験する技術や環境であればなおさらだ。しかし、経験を積むことで不安を小さくすることはできる。ただそれは同じチームメンバー、同じ顧客であればの話だ。永遠に変わらないものなどない。私たちはそういった環境の中でプロジェクトを成功させることを求められている。
経験がないからといって、優秀なメンバーが揃わなかったからといって、はじめからプロジェクトが失敗すると思ってはいけない。そんなことはよくあることだ。どんな状況下でもプロジェクトを成功させるためにプロジェクト管理手法、開発手法がある。
それらの手法が浸透したことによりプロジェクトの成功率は徐々にではあるが上がってきているという。成功率は上がっているものの、失敗するプロジェクトは後を立たない。開発者が手法を学び成長する必要があることはいうまでもないが、それだけでは十分ではない。プロジェクトは顧客のわがままによっていつでも失敗する。顧客もまた手法を学び成長しなければいけない。
ある発注者である顧客は言った。
「使えないプロジェクトマネージャーだ」
こうも言った。
「ろくな開発者がいない」
ある開発者は言った。
「顧客はいつも言うことが変わる」
こうも言った。
「今回は顧客に恵まれなかったね」
間違っているとはいわない。全てその通りなのだろう。しかし、失敗を誰かのせいにするだけでは何も学ぶことはできない。優秀な開発者が揃っていて、仕様変更も機能追加もしない顧客であればSIerに苦労などない。必要なことは誰かを責めることではなく、ふりかえり次に活かせる何かを見つけることだ。
プロジェクト成功に必要なことは、わがままを言わない顧客を見つけることではない。顧客にわがままを言わせないことでもない。顧客のわがままな変更要求に対しても歓迎して受け入れることだ。もちろんただ受け入れるわけではない。顧客はスコープを変えること（受け入れる代わりにやらない、もしくは後回しにすることを決める）、期間を変更することを受け入れる必要がある。顧客はそうしなければプロジェクトが失敗すると理解しなければいけない。
それでもやれという顧客がいることを私は知っている。「生産性を2倍にしろ」と。なんと言われてもできないものはできない。じゃあ予算も2倍にしてもらえますか？
私たちに必要なことは努力（残業、徹夜、休日出勤）ではなく、技術（テクニック、テクノロジー）であることを忘れてはいけない。</description>
    </item>
    
    <item>
      <title>About &#34;nmta blog&#34;</title>
      <link>https://neutrinoboy.jp/about/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://neutrinoboy.jp/about/</guid>
      <description>&amp;ldquo;nmta blog&amp;rdquo; is a blog written by Kosuke Nakamuta. I am a software engineer and project manager.
I&amp;rsquo;m interested in front-end technology and engineering management, but the last technology I created is jQuery.
Vue.js, Angular and React are all good. But I still like jQuery. Hmm &amp;hellip; that time was good. I&amp;rsquo;ll concentrate on management from now on.
If you want to see the product I created, check GitHub.
Learn more and contribute on GitHub.</description>
    </item>
    
    <item>
      <title>Hugo &#43; Netlifyではじめるエンジニアブログ</title>
      <link>https://neutrinoboy.jp/2019/11/21/0954211111/</link>
      <pubDate>Thu, 21 Nov 2019 01:33:35 +0000</pubDate>
      
      <guid>https://neutrinoboy.jp/2019/11/21/0954211111/</guid>
      <description>About Hugo  Hugo is the world’s fastest framework for building websites. It is written in Go.
 Hugoは静的サイトジェネレータの1つです。今やたくさんの静的サイトジェネレータが存在していますが、HugoはGo言語で書かれていること、そして動作が高速なことが特徴です。
Hugoの他にはJekyll, Hexo, Gatsbyなどの静的サイトジェネレータがあります。
参考) 静的サイトジェネレータの世界 (2) : 種類と解説
Showcase 静的サイトジェレネータにより構築された静的サイトはよく技術ブログをはじめとしたブログで使用されることが多いですが、今では様々なプロダクトの公式サイトとしても使われています。
Hugoで作成されたサイトも数多く存在します。1 Password, Let&amp;rsquo;s Encrypt、最近ではKubernetesもHugoで作成されています。
Quick Start GETTING STARTED &amp;gt; Quick Start
公式サイトのドキュメントQuick Startを参照し、Hugoのインストール、サイトの作成、テーマの設定を行います。ローカルでの動作であれば本当にQuickにStart可能です。
ローカルで動作が確認できたらテーマを変更します。Hugoはテーマが豊富にあることも特徴の一つです。またテーマの変更も非常に簡単です。
テーマを変更する Hugo Themes
好きなテーマを選びテーマを変更します。基本的にはテーマをgit cloneしconfigを変更するのみですが、テーマごとに設定可能な項目があるため、テーマごとのインストール手順を参照することをお勧めします。
テーマKieraをインストールする場合 Kiera Theme for Hugo
$ cd themes$ git clone https://github.com/funkydan2/hugo-kiera.git kiera configも忘れずに変更します。
theme = &amp;#34;kiera&amp;#34; テーマを変更することができました。
サイトを公開する ここまででHugoをローカルで動作できるようになりました。次はサイトを外部に公開します。
Github Pagesを使えば簡単に無料でサイトを公開することができます。更にGithub Actionsを使用することでpushするだけでデプロイまで可能となりました。</description>
    </item>
    
    <item>
      <title>slugを変更したので</title>
      <link>https://neutrinoboy.jp/2019/11/20/0658201711/</link>
      <pubDate>Wed, 20 Nov 2019 08:56:01 +0000</pubDate>
      
      <guid>https://neutrinoboy.jp/2019/11/20/0658201711/</guid>
      <description>試してみる。</description>
    </item>
    
    <item>
      <title>contentsのURL変えたよ</title>
      <link>https://neutrinoboy.jp/2019/11/20/2019-11-20-170520/</link>
      <pubDate>Wed, 20 Nov 2019 08:05:05 +0000</pubDate>
      
      <guid>https://neutrinoboy.jp/2019/11/20/2019-11-20-170520/</guid>
      <description>変わったの？
https://www.netlifycms.org/docs/configuration-options/#slug-type
変わったじゃんねえ。
でも思ってたんと違う。
posts/2019/01/01/1234 &amp;ndash;&amp;gt; posts/2019-01-01-1234
うーん
今度はHugoのconfigで変更できた。
https://gohugo.io/content-management/urls/#permalinks
permalinks設定するだけ。
できるもんだねえ。</description>
    </item>
    
    <item>
      <title>投稿時間がずれていたので日本時間に修正した。</title>
      <link>https://neutrinoboy.jp/2019/11/20/%E6%8A%95%E7%A8%BF%E6%99%82%E9%96%93%E3%81%8C%E3%81%9A%E3%82%8C%E3%81%A6%E3%81%84%E3%81%9F%E3%81%AE%E3%81%A7%E6%97%A5%E6%9C%AC%E6%99%82%E9%96%93%E3%81%AB%E4%BF%AE%E6%AD%A3%E3%81%97%E3%81%9F/</link>
      <pubDate>Wed, 20 Nov 2019 07:24:13 +0000</pubDate>
      
      <guid>https://neutrinoboy.jp/2019/11/20/%E6%8A%95%E7%A8%BF%E6%99%82%E9%96%93%E3%81%8C%E3%81%9A%E3%82%8C%E3%81%A6%E3%81%84%E3%81%9F%E3%81%AE%E3%81%A7%E6%97%A5%E6%9C%AC%E6%99%82%E9%96%93%E3%81%AB%E4%BF%AE%E6%AD%A3%E3%81%97%E3%81%9F/</guid>
      <description>テンプレート（Hermit）をみてみる。
see. site/themes/hermit/layouts/posts/single.html
.GitInfo.AuthorDate.Local
おおーGitInfoというものがあるのか。なんかLocalもすでに考慮してあるようだ。
ということで、GitInfoを有効にした。
vi site/config.toml  enableGitInfo = true 日本時間になった！
と、思ったらNetlify CMS上では正しい時間になってるけど、Publishすると
2019-11-20 07:24 +0900
+9:00と出ているものの時間は違う&amp;hellip;
こりゃあテーマぽいな
と、思ったらまたまた外れた。
今度はNetlifyだった。
NetlifyのコンパネからEnvironment VariablesにTZ Asia/Tokyoをセットしてbuildしなおしたら時間が正しくなった。
今度こそ！</description>
    </item>
    
    <item>
      <title>スマホでPOST</title>
      <link>https://neutrinoboy.jp/2019/11/20/%E3%82%B9%E3%83%9E%E3%83%9B%E3%81%A7post/</link>
      <pubDate>Wed, 20 Nov 2019 06:26:30 +0000</pubDate>
      
      <guid>https://neutrinoboy.jp/2019/11/20/%E3%82%B9%E3%83%9E%E3%83%9B%E3%81%A7post/</guid>
      <description>スマホから投稿したくなることもあるよね。</description>
    </item>
    
    <item>
      <title>Netlify CMSでHugoをCMS化する</title>
      <link>https://neutrinoboy.jp/2019/11/20/netify-cms%E3%81%A7hugo%E3%82%92cms%E5%8C%96%E3%81%99%E3%82%8B/</link>
      <pubDate>Wed, 20 Nov 2019 05:49:09 +0000</pubDate>
      
      <guid>https://neutrinoboy.jp/2019/11/20/netify-cms%E3%81%A7hugo%E3%82%92cms%E5%8C%96%E3%81%99%E3%82%8B/</guid>
      <description>これを見ればわかるよ。
https://www.yuri-k.com/post/hugo_and_netlify_cms/</description>
    </item>
    
    <item>
      <title>最初の投稿</title>
      <link>https://neutrinoboy.jp/2019/10/16/%E6%9C%80%E5%88%9D%E3%81%AE%E6%8A%95%E7%A8%BF/</link>
      <pubDate>Wed, 16 Oct 2019 02:38:57 +0000</pubDate>
      
      <guid>https://neutrinoboy.jp/2019/10/16/%E6%9C%80%E5%88%9D%E3%81%AE%E6%8A%95%E7%A8%BF/</guid>
      <description>最初の投稿。</description>
    </item>
    
  </channel>
</rss>